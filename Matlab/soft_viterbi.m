function [ ipHat_v1 ] = soft_viterbi( y2 )

% viterbi decoder

LUT = [zeros(64,32) ones(64,32)];
% ref_main = [0 0 0;1 1 1;1 0 0;0 1 1;0 0 1;1 1 0;1 0 1;0 1 0]; 
% ref_1 = [ref_main;bitxor(ref_main,kron([1 1 0],ones(size(ref_main,1),1)))];
% ref_2 = [ref_1;bitxor(ref_1,kron([1 1 1],ones(size(ref_1,1),1)))];
% ref_3 = [ref_2;bitxor(ref_2,kron([0 1 1],ones(size(ref_2,1),1)))];
% ref_last = [ref_3;bitxor(ref_3,kron([1 1 1],ones(size(ref_3,1),1)))];
% ref_soft = (-2*ref_last+1)*(1/sqrt(2));
ref_soft = [0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,0.707106781186548,-0.707106781186548;0.707106781186548,-0.707106781186548,0.707106781186548;0.707106781186548,0.707106781186548,-0.707106781186548;-0.707106781186548,-0.707106781186548,0.707106781186548;-0.707106781186548,0.707106781186548,0.707106781186548;0.707106781186548,-0.707106781186548,-0.707106781186548;0.707106781186548,0.707106781186548,0.707106781186548;-0.707106781186548,-0.707106781186548,-0.707106781186548];

   state_trellis = log(zeros(64,length(y2)/3+1));
   state_trellis(1,1)=0;
   path_surv = zeros(64,length(y2)/3);
   for ii = 1:length(y2)/3
      r = y2(3*ii-2:3*ii); % taking 3 coded bits
      
      % computing the Hamming distance between ip coded sequence with [00;01;10;11]
      rv = kron(ones(128,1),r);
      euclDist = sum((rv.*ref_soft),2);
      for jj = 1:32
                    % state 1-32
          bm1 = euclDist(2*jj-1)-euclDist(64+2*jj-1)+state_trellis(2*jj-1,ii);
          bm2 = euclDist(2*jj)-euclDist(64+2*jj)+state_trellis(2*jj,ii);
          [state_trellis(jj,ii+1), idx] = max([bm1,bm2]);
          path_surv(jj,ii) = idx+2*(jj-1);
      end
                    % states 33-64
      for jj = 1:32
          bm1 = euclDist(64+2*jj-1)-euclDist(2*jj-1)+state_trellis(2*jj-1,ii);
          bm2 = euclDist(64+2*jj)-euclDist(2*jj)+state_trellis(2*jj,ii);
          [state_trellis(32+jj,ii+1), idx] = max([bm1,bm2]);
          path_surv(32+jj,ii) = idx+2*(jj-1);
      end

   end
    % trace back unit
   currState = 1;
   ipHat_v1 = zeros(1,length(y2)/3);
   for jj = length(y2)/3:-1:1
      prevState =  path_surv(currState,jj); 
      ipHat_v1(jj) = LUT(prevState,currState);
      currState = prevState;
   end

end

